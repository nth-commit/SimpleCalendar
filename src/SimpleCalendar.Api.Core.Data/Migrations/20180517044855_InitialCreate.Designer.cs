// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SimpleCalendar.Api.Core.Data;

namespace SimpleCalendar.Api.Core.Data.Migrations
{
    [DbContext(typeof(CoreDbContext))]
    [Migration("20180517044855_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-rc1-32029")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SimpleCalendar.Api.Core.Data.EventEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DataJson");

                    b.Property<int>("DataJsonVersion");

                    b.Property<DateTime>("EndTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsPublished");

                    b.Property<string>("RegionId");

                    b.Property<DateTime>("StartTime");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("SimpleCalendar.Api.Core.Data.RegionEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("DataJson");

                    b.Property<int>("DataJsonVersion");

                    b.Property<string>("ParentId");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Regions");

                    b.HasData(
                        new { Id = "ROOT", DataJsonVersion = 0 }
                    );
                });

            modelBuilder.Entity("SimpleCalendar.Api.Core.Data.RegionRoleEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("RegionId")
                        .IsRequired();

                    b.Property<int>("Role");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("RegionId", "UserId");

                    b.ToTable("RegionRoles");

                    b.HasData(
                        new { Id = "ROOT_ADMIN", RegionId = "ROOT", Role = 3, UserId = "ROOT_ADMIN" }
                    );
                });

            modelBuilder.Entity("SimpleCalendar.Api.Core.Data.EventEntity", b =>
                {
                    b.HasOne("SimpleCalendar.Api.Core.Data.RegionEntity", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId");
                });

            modelBuilder.Entity("SimpleCalendar.Api.Core.Data.RegionEntity", b =>
                {
                    b.HasOne("SimpleCalendar.Api.Core.Data.RegionEntity", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("SimpleCalendar.Api.Core.Data.RegionRoleEntity", b =>
                {
                    b.HasOne("SimpleCalendar.Api.Core.Data.RegionEntity", "Region")
                        .WithMany("Roles")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
